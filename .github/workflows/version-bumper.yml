name: Version Bumper

description: |
  A GitHub Action to automatically bump the version of a project based on pull request labels.
  It uses the `bump` gem to handle versioning and tagging.

  This action is triggered when a pull request is closed and merged into the main branch.
  It determines the version bump type (major, minor, patch) based on the labels applied to the pull request.
  Define the 'Version Bump: Major' and 'Version Bump: Minor' labels in your repository to use this action effectively.

  The action updates version strings in the files specified in the `.github/workflows/version-files.txt` file, 
  which contains reasonable defaults for Progress Chef, but may need to be customized for your project.

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  bump-version:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Git
        run: |
          git config --global user.name "Progress CI Automation"
          git config --global user.email "ci@progress.com"
      
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 'ruby'
          bundler-cache: true
      
      - name: Install bump gem
        run: gem install bump
      
      - name: Determine bump type from labels
        id: bump-type
        run: |
          if [[ "${{ toJson(github.event.pull_request.labels.*.name) }}" == *"Version Bump: Major"* ]]; then
            echo "level=major" >> $GITHUB_OUTPUT
          elif [[ "${{ toJson(github.event.pull_request.labels.*.name) }}" == *"Version Bump: Minor"* ]]; then
            echo "level=minor" >> $GITHUB_OUTPUT
          else
            echo "level=patch" >> $GITHUB_OUTPUT
          fi
          echo "Determined bump level: $(cat $GITHUB_OUTPUT | grep level | cut -d= -f2)"
      
      - name: Build list of files to update
        id: file-list
        run: |
          VERSION_FILES_PATH=".github/workflows/version-files.txt"
          BUMP_FILE_ARGS=""
          
          if [ -f "$VERSION_FILES_PATH" ]; then
            echo "Reading file patterns from $VERSION_FILES_PATH"
            
            # Read each line from the file, which may contain glob patterns
            while IFS= read -r file_pattern || [ -n "$file_pattern" ]; do
              # Skip empty lines and comments
              if [ -z "$file_pattern" ] || [[ "$file_pattern" == \#* ]]; then
                continue
              fi
              
              # Trim whitespace
              file_pattern=$(echo "$file_pattern" | xargs)
              echo "  - Processing pattern: $file_pattern"
              
              # Expand the glob pattern to actual files
              matched_files=$(find . -path "./$file_pattern" 2>/dev/null || echo "")
              
              if [ -z "$matched_files" ]; then
                # Check if it's a literal file that exists
                if [ -f "$file_pattern" ]; then
                  echo "    - Found literal file: $file_pattern"
                  BUMP_FILE_ARGS+=" --replace-in $file_pattern"
                else
                  echo "    - WARNING: No files matched pattern '$file_pattern' and file does not exist"
                  echo "    - Skipping this pattern as bump cannot process non-existent files"
                fi
              else
                # Add each matched file individually after verifying it exists
                while IFS= read -r file; do
                  if [ -n "$file" ]; then
                    # Remove leading ./ from the file path
                    relative_file="${file#./}"
                    
                    # Double-check the file exists (should always be true from find)
                    if [ -f "$relative_file" ]; then
                      echo "    - Found file: $relative_file"
                      BUMP_FILE_ARGS+=" --replace-in $relative_file"
                    else
                      echo "    - WARNING: File '$relative_file' was found by glob but doesn't exist - skipping"
                    fi
                  fi
                done <<< "$matched_files"
              fi
            done < "$VERSION_FILES_PATH"
          else
            echo "Warning: $VERSION_FILES_PATH not found, using default version files only"
          fi
          
          echo "file_args=$BUMP_FILE_ARGS" >> $GITHUB_OUTPUT
      
      - name: Run version bump with custom files
        run: |
          BUMP_LEVEL="${{ steps.bump-type.outputs.level }}"
          FILE_ARGS="${{ steps.file-list.outputs.file_args }}"
          
          # Build the bump command with the level and any file arguments
          BUMP_COMMAND="bump $BUMP_LEVEL --tag $FILE_ARGS"
          
          echo "Executing: $BUMP_COMMAND"
          # Execute the bump command (bump will handle committing and tagging)
          eval $BUMP_COMMAND
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Push changes to main
        run: |
          # Bump has already committed and tagged, we just need to push
          git push origin HEAD:main
          git push origin --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}